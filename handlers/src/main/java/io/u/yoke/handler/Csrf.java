/**
 * Copyright 2011-2014 the original author or authors.
 */
package io.u.yoke.handler;

import io.u.yoke.Context;
import io.u.yoke.Handler;
import io.u.yoke.http.Request;
import io.u.yoke.http.Status;
import io.u.yoke.http.form.Form;
import org.jetbrains.annotations.NotNull;

import java.util.UUID;

import static io.u.yoke.http.Method.*;

/**
 * # Csrf
 * <p>
 * This middleware adds a CSRF token to requests which mutate state. You should put the result within a hidden form
 * field, query-string etc. This token should be validated against the visitor's session.
 * The default value handler checks getRequest body generated by the BodyParser middleware, getRequest query generated and
 * the "X-CSRF-Token" header field.
 * <p>
 * This middleware requires session support, thus should be added somewhere below Session.
 */
public class Csrf implements Handler<Context> {

  /**
   * Handler that validates the CRSF token
   */
  private final Handler<Context> valueHandler;

  /**
   * Name of the property where the token is found/stored in the getRequest context
   */
  private final String key;

  /**
   * Instantiate a new Csrf with a user defined key
   * <p>
   * <pre>
   * new Csrf("_crsf")
   * </pre>
   *
   * @param key name of the context variable to store the token.
   */
  public Csrf(@NotNull final String key) {
    this.key = key;
    valueHandler = ctx -> {
      final String token = ctx.getAt(key);
      final Request req = ctx.getRequest();

      String value = null;

      try {
        final Form form = req.getBody();

        if (form != null) {
          value = form.getParam(key);
          if (value == null) {
            value = req.getParam(key);
            if (value == null) {
              value = req.getHeader("x-csrf-token");
            }
          }
        }

        // check
        if (token != null && !token.equals(value)) {
          ctx.fail(Status.FORBIDDEN);
          return;
        }

        // OK
        ctx.next();
      } catch (RuntimeException e) {
        ctx.fail(e);
      }
    };
  }

  /**
   * Instantiate a new Csrf with the default key "_crsf"
   * <p>
   * <pre>
   * new Csrf()
   * </pre>
   */
  public Csrf() {
    this("_csrf");
  }

  /**
   * Instantiate a new Csrf with custom Handler and key
   * <p>
   * <pre>
   * new Csrf("_crsf", new ValueHandler() {...})
   * </pre>
   *
   * @param key          name of the context variable to store the token.
   * @param valueHandler the handler for the token validation.
   */
  public Csrf(@NotNull String key, @NotNull Handler<Context> valueHandler) {
    this.key = key;
    this.valueHandler = valueHandler;
  }

  /**
   * Instantiate a new Csrf with custom Handler
   * <p>
   * <pre>
   * new Csrf(new ValueHandler() {...})
   * </pre>
   *
   * @param valueHandler the handler for the token validation.
   */
  public Csrf(@NotNull final Handler<Context> valueHandler) {
    this("_csrf", valueHandler);
  }

  @Override
  public void handle(@NotNull final Context ctx) {

    final Request req = ctx.getRequest();

    String token = ctx.getAt(key);
    // generate CSRF token
    if (token == null) {
      token = UUID.randomUUID().toString();
      ctx.putAt(key, token);
    }

    // ignore these methods
    if (GET == req.getMethod() || HEAD == req.getMethod() || OPTIONS == req.getMethod()) {
      ctx.next();
      return;
    }

    // determine value
    valueHandler.handle(ctx);
  }
}
